#include <stdio.h>

#include <stdlib.h>

#include <string.h>

struct Node {

 char data[50];

 struct Node* next;

};

struct Node* createNode(char* name) {

 struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));

 strcpy(newNode->data, name);

 newNode->next = NULL;

 return newNode;

}

void append(struct Node** head, char* name) {

 struct Node* newNode = createNode(name);

 if (*head == NULL) {

 *head = newNode;

 } else {

 struct Node* temp = *head;

 while (temp->next != NULL) {

 temp = temp->next;

 }

 temp->next = newNode;

 }

}

void insert(struct Node** head, char* name, int position) {

 struct Node* newNode = createNode(name);

 if (position == 0) {
newNode->next = *head;

 *head = newNode;

 } else {

 struct Node* temp = *head;

 for (int i = 0; i < position - 1; i++) {

 if (temp == NULL) {

 printf("Position out of bounds\n");

 return;

 }

 temp = temp->next;

 }

 newNode->next = temp->next;

 temp->next = newNode;

 }

}

void deleteContact(struct Node** head, char* name, int position) {

 if (position != -1) {

 if (position == 0 && *head != NULL) {

 struct Node* temp = *head;

 *head = (*head)->next;

 free(temp);

 } else {

 struct Node* temp = *head;

 for (int i = 0; i < position - 1; i++) {

 if (temp == NULL || temp->next == NULL) {

 printf("Position out of bounds\n");

 return;

 }

 temp = temp->next;

 }

 struct Node* delNode = temp->next;

 temp->next = delNode->next;

 free(delNode);

 }

 } else {

 struct Node* temp = *head;

 struct Node* prev = NULL;
while (temp != NULL && strcmp(temp->data, name) != 0) {

 prev = temp;

 temp = temp->next;

 }

 if (temp == NULL) {

 printf("Contact not found\n");

 return;

 }

 if (prev == NULL) {

 *head = temp->next;

 } else {

 prev->next = temp->next;

 }

 free(temp);

 }

}

void displayContacts(struct Node* head) {

 if (head == NULL) {

 printf("Contact list is empty\n");

 return;

 }

 struct Node* temp = head;

 printf("Contact list: ");

 while (temp != NULL) {

 printf("%s -> ", temp->data);

 temp = temp->next;

 }

 printf("NULL\n");

}

void search(struct Node* head, char* name) {

 struct Node* temp = head;

 int position = 0;

 while (temp != NULL) {

 if (strcmp(temp->data, name) == 0) {

 printf("%s found at position %d\n", name, position);

 return;

 }
temp = temp->next;

 position++;

 }

 printf("%s not found in the contact list\n", name);

}

int main() {

 struct Node* head = NULL;

 int choice, numContacts, position;

 char name[50];

 char deleteOption;

 do {

 printf("\n1. Create the list of contacts\n");

 printf("2. Insert a new contact\n");

 printf("3. Delete a contact\n");

 printf("4. Display contact list\n");

 printf("5. Search for a contact\n");

 printf("6. Exit\n");

 printf("Enter your choice: ");

 scanf("%d", &choice);

 switch (choice) {

 case 1:

 printf("Enter the number of contacts: ");

 scanf("%d", &numContacts);

 for (int i = 0; i < numContacts; i++) {

 printf("Enter contact name %d: ", i + 1);

 scanf("%s", name);

 append(&head, name);

 }

 displayContacts(head);

 break;

 case 2:

 printf("Enter the contact's name to insert: ");

 scanf("%s", name);
printf("Enter the position (0-based index) to insert the contact: ");

 scanf("%d", &position);

 insert(&head, name, position);

 displayContacts(head);

 break;

 case 3:

 printf("Delete by name or position? (n/p): ");

 scanf(" %c", &deleteOption);

 if (deleteOption == 'n') {

 printf("Enter the contact's name to delete: ");

 scanf("%s", name);

 deleteContact(&head, name, -1);

 } else if (deleteOption == 'p') {

 printf("Enter the position to delete: ");

 scanf("%d", &position);

 deleteContact(&head, "", position);

 } else {

 printf("Invalid option.\n");

 }

 displayContacts(head);

 break;

 case 4:

 displayContacts(head);

 break;

 case 5:

 printf("Enter the contact's name to search: ");

 scanf("%s", name);

 search(head, name);

 break;

 case 6:

 printf("Exiting the program...\n");

 break;
default:

 printf("Invalid choice! Please try again.\n");

 }

 } while (choice != 6);

 return 0;

}
