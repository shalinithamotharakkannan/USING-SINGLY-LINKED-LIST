#include <stdio.h>

#include <stdlib.h>

#include <string.h>

typedef struct Node {
char name[50];

 struct Node *prev;

 struct Node *next;

} Node;

Node *head = NULL;

Node* createNode(char name[]) {

 Node *newNode = (Node*)malloc(sizeof(Node));

 strcpy(newNode->name, name);

 newNode->prev = NULL;

 newNode->next = NULL;

 return newNode;

}

void displayForward() {

 Node *temp = head;

 if (temp == NULL) {

 printf("List is empty.\n");

 return;

 }

 printf("Contacts (Forward Traversal):\n");

 while (temp != NULL) {

 printf("%s -> ", temp->name);

 temp = temp->next;

 }

 printf("NULL\n");

}

void displayBackward() {

 Node *temp = head;

 if (temp == NULL) {

 printf("List is empty.\n");

 return;

 }

 // Go to the last node

 while (temp->next != NULL)
temp = temp->next;

 printf("Contacts (Backward Traversal):\n");

 while (temp != NULL) {

 printf("%s -> ", temp->name);

 temp = temp->prev;

 }

 printf("NULL\n");

}

void insertAtEnd(char name[]) {

 Node *newNode = createNode(name);

 if (head == NULL) {

 head = newNode;

 } else {

 Node *temp = head;

 while (temp->next != NULL)

 temp = temp->next;

 temp->next = newNode;

 newNode->prev = temp;

 }

 displayForward();

}

void insertAtPosition(char name[], int pos) {

 Node *newNode = createNode(name);

 if (pos == 1) {

 newNode->next = head;

 if (head != NULL)

 head->prev = newNode;

 head = newNode;

 } else {

 Node *temp = head;

 int i = 1;

 while (temp != NULL && i < pos - 1) {

 temp = temp->next;

 i++;
}

 if (temp == NULL) {

 printf("Position out of bounds.\n");

 return;

 }

 newNode->next = temp->next;

 if (temp->next != NULL)

 temp->next->prev = newNode;

 temp->next = newNode;

 newNode->prev = temp;

 }

 displayForward();

}

void deleteByPosition(int pos) {

 if (head == NULL) {

 printf("List is empty.\n");

 return;

 }

 Node *temp = head;

 if (pos == 1) {

 head = temp->next;

 if (head != NULL)

 head->prev = NULL;

 free(temp);

 } else {

 int i = 1;

 while (temp != NULL && i < pos) {

 temp = temp->next;

 i++;

 }

 if (temp == NULL) {

 printf("Position out of bounds.\n");

 return;

 }

 if (temp->next != NULL)

 temp->next->prev = temp->prev;
if (temp->prev != NULL)

 temp->prev->next = temp->next;

 free(temp);

 }

 displayForward();

}

void deleteByName(char name[]) {

 if (head == NULL) {

 printf("List is empty.\n");

 return;

 }

 Node *temp = head;

 while (temp != NULL) {

 if (strcmp(temp->name, name) == 0) {

 if (temp->prev != NULL)

 temp->prev->next = temp->next;

 else

 head = temp->next;

 if (temp->next != NULL)

 temp->next->prev = temp->prev;

 free(temp);

 displayForward();

 return;

 }

 temp = temp->next;

 }

 printf("Contact not found.\n");

}

void searchContact(char name[]) {

 Node *temp = head;

 int pos = 1;

 while (temp != NULL) {

 if (strcmp(temp->name, name) == 0) {

 printf("Contact '%s' found at position %d.\n", name, pos);

 return;
}

 temp = temp->next;

 pos++;

 }

 printf("Contact '%s' not found.\n", name);

}

int main() {

 int choice, pos;

 char name[50];

 

 do {

 printf("\nContact Management System\n");

 printf("1. Create list\n");

 printf("2. Insert a new contact\n");

 printf("3. Delete a contact\n");

 printf("4. Traverse list (forward and backward)\n");

 printf("5. Search for a contact\n");

 printf("6. Exit\n");

 printf("Enter your choice: ");

 scanf("%d", &choice);

 switch (choice) {

 case 1:

 printf("Enter contact name (type 'done' to stop): ");

 while (1) {

 scanf("%s", name);

 if (strcmp(name, "done") == 0)

 break;

 insertAtEnd(name);

 }

 break;

 case 2:

 printf("Enter contact name: ");

 scanf("%s", name);

 printf("Enter position to insert: ");

 scanf("%d", &pos);
insertAtPosition(name, pos);

 break;

 case 3:

 printf("Delete by (1) Position or (2) Name? ");

 scanf("%d", &pos);

 if (pos == 1) {

 printf("Enter position to delete: ");

 scanf("%d", &pos);

 deleteByPosition(pos);

 } else if (pos == 2) {

 printf("Enter contact name to delete: ");

 scanf("%s", name);

 deleteByName(name);

 } else {

 printf("Invalid choice.\n");

 }

 break;

 case 4:

 displayForward();

 displayBackward();

 break;

 case 5:

 printf("Enter contact name to search: ");

 scanf("%s", name);

 searchContact(name);

 break;

 case 6:

 printf("Exiting...\n");

 break;

 default:

 printf("Invalid choice.\n");

 }

 } while (choice != 6);

 return 0;

}
